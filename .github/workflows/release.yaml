name: Release
on:
  workflow_dispatch:

jobs:
  setup-versions:
    name: Setup Versions
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      python_version: ${{ steps.version.outputs.python_version }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # 3.3.0
      - name: 🏗️ gather versions from '.tool-versions'
        uses: endorama/asdf-parse-tool-versions@v1
        id: versions
      - name: 🏗️ Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
      - name: 🏗️ Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: 🏗️ Output Versions
        id: version
        run: |
          echo "version=$(poetry version --short)" >> $GITHUB_OUTPUT
          echo "python_version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT

  build-config-file:
    name: Build Config File
    runs-on: ubuntu-22.04
    needs: setup-versions
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # 3.3.0
      - name: 🏗️ Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ needs.setup-versions.outputs.python_version }}"
      - name: 🏗️ Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: 🏗️ Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ needs.setup-versions.outputs.python_version }}-${{ hashFiles('**/poetry.lock') }}
      - name: 🏗️ Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: 🏗️ Install Project
        run: poetry install --no-interaction

      - name: 👷 Run Tests
        run: |
          source .venv/bin/activate
          pytest tests/

      - name: 👷 build
        run: |
          make output/adaptive_bed_mesh.cfg VERSION="${{ needs.setup-versions.outputs.version }}"

      - name: 🏗️ upload
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # 3.1.2
        with:
          name: adaptive_bed_mesh.cfg
          path: output/adaptive_bed_mesh.cfg

  release:
    name: Draft release
    runs-on: ubuntu-22.04
    needs: [setup-versions, build-config-file]
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # 3.3.0
        with:
          fetch-depth: 0
      - name: 👷 create release notes
        run: |
          export OLD_TAG=$(git describe --tags --abbrev=0)
          export NEW_TAG="v${{ needs.setup-versions.outputs.version }}"
          export COMMIT_COUNT=$(git rev-list --count ${old_tag}..HEAD)
          export VERSION="${{ needs.setup-versions.outputs.version }}"
          envsubst < .github/release_notes_template.txt > ./release-notes.txt
        ## short hand for grab all artifacts.
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # 3.0.2
      - uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e # 1.12.0
        with:
          draft: true
          allowUpdates: true
          artifacts: "adaptive_bed_mesh.cfg"
          name: ${{ needs.setup-versions.outputs.version }}
          tag: v${{ needs.setup-versions.outputs.version }}
          bodyFile: "./release-notes.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
